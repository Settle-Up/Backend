
# secrets 보안 관리를 위해 private repository 안에서
# GitHub Actions와 AWS CodeDeploy, S3, EC2를 통해 CI/CD 파이프라인을 구축했습니다.
# 아래는 private repository 안의 코드를 재현한 것입니다. 

name: Java CI with Gradle and Deploy to AWS EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      
      - name: Build with Gradle without running tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build -x test
      
      - name: Add permission to Gradlew
        run: chmod +x ./gradlew
      
      - name: Echo Commit Author
        run: echo "Commit made by ${{ github.actor }}"
      
      - name: Create deployment directory and copy JAR file
        run: |
          mkdir -p deployment
          cp build/libs/*.jar deployment/
      
      - name: Copy appspec.yml and scripts to deployment directory
        run: |
          cp appspec.yml deployment/
          cp -R scripts/ deployment/scripts/

      - name: Grant execute permission for scripts
        run: chmod +x ./scripts/*.sh
      
      - name: Create application.yml in deployment directory
        run: ./scripts/create-application-yml.sh deployment/
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          OAUTH_KAKAO_CLIENT_ID: ${{ secrets.OAUTH_KAKAO_CLIENT_ID }}
          OAUTH_KAKAO_CLIENT_SECRET: ${{ secrets.OAUTH_KAKAO_CLIENT_SECRET }}
          OAUTH_KAKAO_GRANT_TYPE: ${{ secrets.OAUTH_KAKAO_GRANT_TYPE }}
          OAUTH_KAKAO_KAKAO_TOKEN_URI: ${{ secrets.OAUTH_KAKAO_KAKAO_TOKEN_URI }}
          OAUTH_KAKAO_REDIRECT_URI: ${{ secrets.OAUTH_KAKAO_REDIRECT_URI }}
          OAUTH_KAKAO_SCOPE: ${{ secrets.OAUTH_KAKAO_SCOPE }}
          OAUTH_KAKAO_USER_INFO_ACCEPT: ${{ secrets.OAUTH_KAKAO_USER_INFO_ACCEPT }}
          AZURE_API_KEY: ${{ secrets.AZURE_API_KEY }}
          AZURE_GET_URL: ${{ secrets.AZURE_GET_URL }}
          AZURE_POST_URL: ${{ secrets.AZURE_POST_URL }}
          ENCRYPTION_SECRET_KEY: ${{ secrets.ENCRYPTION_SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          REDIS_HOST : ${{ secrets.REDIS_HOST }}
          REDIS_PORT : ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD : ${{ secrets.REDIS_PASSWORD }}
          SENTRY_DSN : ${{ secrets.SENTRY_DSN }}          

      - name: Make zip file for deployment
        run: zip -r deployment.zip deployment/
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      
      - name: Upload to S3
        run: aws s3 cp deployment.zip s3://settleupsooandhee/settleupbucket/deployment.zip
      
      - name: Deploy to AWS EC2 via CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name settleupDeploy \
            --deployment-group-name settleup \
            --revision revisionType=S3,s3Location="{bucket=settleupsooandhee,key=settleupbucket/deployment.zip,bundleType=zip}" \
            --deployment-config-name CodeDeployDefault.OneAtATime
            
      - name: Execute script on EC2 instance via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/app/deploy  
            chmod +x ./scripts/start.sh
            ./scripts/start.sh & 
            sleep 15  
            echo "스프링 시작 로그 확인:"
            # 로그 파일이나 특정 출력 방식에 따라 로그 확인 방법을 조정해야 할 수 있습니다.
            ps aux | grep backend-0.0.1-SNAPSHOT.jar
            if pgrep -f backend-0.0.1-SNAPSHOT.jar > /dev/null
            then
                echo "hello.deploy.success."
            else
                echo "Deployment failed, application is not running."
                exit 1
            fi
